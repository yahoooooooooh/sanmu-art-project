## 项目需求与进展报告

https://github.com/yahoooooooooh/sanmu-art-project
https://yahoooooooooh.github.io/sanmu-art-project/

相关可执行命令   git push origin main

### 一、原目标

本项目旨在为“扑灰年画创新传承项目”构建一个零成本、高效率的静态成果展示网站。核心目标如下：

1.  **内容承载与管理**：
    *   支持大量（预计百篇级别）独立文章内容的展示，文章以 Markdown (.md) 格式进行管理。
    *   支持大量（预计百张级别）独立图片资料的存储与展示，兼容主流图片格式。
    *   文章内可方便嵌入图片，并考虑优化加载体验。
2.  **动态化与交互性**：
    *   网站主页或导航区能通过 JavaScript 动态生成文章列表，点击可加载并显示相应文章。
    *   使用客户端 JavaScript 库（如 Marked.js）将 Markdown 内容实时转换为 HTML 进行展示。
    *   提供用户评论功能，允许访问者对网站内容进行反馈。最初设想是每篇文章有独立的评论区，利用 Giscus 实现，并使其与特定文章页面动态关联。
3.  **技术实现与部署**：
    *   采用 HTML, CSS, JavaScript 为前端基础，不依赖复杂框架或构建工具。
    *   通过 Python 脚本扫描内容目录（`articles/`, `images/`），自动生成 JSON 格式的索引文件 (`article_index.json`, `image_index.json`)，供前端 JavaScript 调用，以实现内容的动态加载。
    *   网站托管于 GitHub Pages，使用其默认子域名，确保国内可访问。
    *   内容更新流程为：本地更新 Markdown 文件或图片 -> 运行 Python 脚本更新索引 -> 推送至 GitHub 仓库。
4.  **项目管理与辅助**：
    *   确保技术方案在项目负责人可理解和维护的范围内。
    *   提供必要的技术指导和代码实现辅助。

### 二、现情况

项目已取得显著进展，网站的核心功能、视觉风格和基本内容框架均已实现：

1.  **网站基本结构与视觉设计**：
    *   `index.html` 作为主入口，采用现代化布局，包含Logo、清晰导航、文章区、图片画廊区、AI对话应用推广区及页脚。
    *   `css/style.css` 实现了定制化的黄色主题视觉风格，注重用户体验和现代感。
    *   `js/lib/marked.min.js` 已引入，用于 Markdown 解析。
    *   `js/main.js` 实现了主要的客户端逻辑，包括视图切换、内容加载和URL哈希路由。
2.  **内容索引与加载**：
    *   Python 脚本 `generate_index.py` 能够正确扫描 `articles/` 和 `images/` 目录，并生成相应的 `article_index.json` 和 `image_index.json` 文件。
    *   `main.js` 能够通过 `fetch` API 读取 JSON 索引，动态生成文章列表和图片画廊。
    *   点击文章列表中的链接，能够异步加载对应的 Markdown 文件内容，并通过 `marked.js` 渲染为 HTML 显示在文章内容区。
3.  **图片画廊功能**：
    *   实现了独立的图片画廊视图，以网格形式展示图片缩略图。点击缩略图可在新标签页打开原图。
    *   （注意：目前画廊中的图片可能仍为占位图片，等待替换）
4.  **导航与视图切换**：
    *   左侧导航栏实现了“文章概览”、“图片画廊”和“AI对话”三个主要视图的切换功能，并支持URL哈希定位。
5.  **评论功能**：
    *   在 `index.html` 页面底部添加了指向百度贴吧总讨论区的链接，取代了原Giscus方案。
6.  **AI对话功能推广**：
    *   新增“AI对话”栏目，引导用户了解并下载独立的AI对话应用程序。
7.  **部署与路径处理**：
    *   网站已适配 GitHub Pages 部署，`main.js` 中包含对 `basePath` 的处理逻辑。
8.  **待完善与主要挑战**：
    *   **图片资源替换**：当前图片画廊和可能部分文章内嵌的图片仍为占位符或测试图片，需要替换为最终的项目相关图片。
    *   确保所有文章内容已按最新格式整理并上传。

### 三、之后任务

为最终完成项目并达到高质量的展示效果，后续主要任务包括：

1.  **核心图片资源替换与完善**：
    *   **首要任务**：收集所有项目相关的最终版高质量图片（预计百张级别）。
    *   将这些图片放置于 `images/` 目录下，替换掉所有占位图片和测试图片。
    *   确保图片命名规范，并考虑图片大小和格式的优化（如使用WebP格式，进行适当压缩）以提升加载速度。
2.  **文章内容最终审查与填充**：
    *   将所有项目相关的文章（约100篇）最终整理为 Markdown 格式，确保内容准确、排版良好，并放置于 `articles/` 目录下。
    *   检查文章内嵌入图片的路径是否正确（如果文章内有图片）。
3.  **重要：内容更新后的索引生成与推送**：
    *   **每次**图片或文章内容更新后，务必在本地项目根目录运行 `python generate_index.py` 脚本，以更新 `data/` 目录下的 `article_index.json` 和 `image_index.json` 文件。
    *   将所有更改（包括新内容文件、更新后的索引文件、以及可能的代码修改）完整推送到 GitHub 仓库。——此条作为每次内容更新的固定提醒。
4.  **百度贴吧讨论区链接确认**：
    *   再次确认 `index.html` 文件中“前往总讨论区”的链接指向正确的百度贴吧帖子，并且该帖子已按要求设置好。
5.  **整体测试与优化**：
    *   对网站进行全面测试，重点关注：新替换图片的显示效果、文章列表加载、文章内容渲染、图片画廊功能、所有导航链接和外部链接的有效性。
    *   在不同浏览器和设备上进行兼容性测试。
    *   检查并修复任何可能的显示错误或功能异常。
6.  **文档化与交接**：
    *   (内部) 简要记录内容更新流程（编辑/添加文件 -> 运行索引脚本 -> Git 推送）供项目团队参考。
    *   确认 GitHub Pages 部署成功，网站可通过公开 URL 访问并展示最新内容。
7.  **（可选）进一步优化**：
    *   根据实际图片和文章内容量，再次审视和微调 CSS 样式，确保最佳视觉体验。
    *   考虑为图片画廊实现灯箱效果 (Lightbox) 以优化大图查看体验。
    *   为侧边栏导航项添加图标，增强视觉引导。
