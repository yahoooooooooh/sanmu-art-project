## 项目需求与进展报告

### 一、原目标

本项目旨在为“扑灰年画创新传承项目”构建一个零成本、高效率的静态成果展示网站。核心目标如下：

1.  **内容承载与管理**：
    *   支持大量（预计百篇级别）独立文章内容的展示，文章以 Markdown (.md) 格式进行管理。
    *   支持大量（预计百张级别）独立图片资料的存储与展示，兼容主流图片格式。
    *   文章内可方便嵌入图片，并考虑优化加载体验。
2.  **动态化与交互性**：
    *   网站主页或导航区能通过 JavaScript 动态生成文章列表，点击可加载并显示相应文章。
    *   使用客户端 JavaScript 库（如 Marked.js）将 Markdown 内容实时转换为 HTML 进行展示。
    *   提供用户评论功能，允许访问者对网站内容进行反馈。最初设想是每篇文章有独立的评论区，利用 Giscus 实现，并使其与特定文章页面动态关联。
3.  **技术实现与部署**：
    *   采用 HTML, CSS, JavaScript 为前端基础，不依赖复杂框架或构建工具。
    *   通过 Python 脚本扫描内容目录（`articles/`, `images/`），自动生成 JSON 格式的索引文件 (`article_index.json`, `image_index.json`)，供前端 JavaScript 调用，以实现内容的动态加载。
    *   网站托管于 GitHub Pages，使用其默认子域名，确保国内可访问。
    *   内容更新流程为：本地更新 Markdown 文件或图片 -> 运行 Python 脚本更新索引 -> 推送至 GitHub 仓库。
4.  **项目管理与辅助**：
    *   确保技术方案在项目负责人可理解和维护的范围内。
    *   提供必要的技术指导和代码实现辅助。

### 二、现情况

目前项目已取得阶段性成果，核心功能框架已搭建完成：

1.  **网站基本结构**：
    *   `index.html` 作为主入口，包含头部、导航栏、主内容区（文章视图、图片画廊视图）和页脚。
    *   `css/style.css` 提供基础样式。
    *   `js/lib/marked.min.js` 已引入，用于 Markdown 解析。
    *   `js/main.js` 实现了主要的客户端逻辑。
2.  **内容索引与加载**：
    *   Python 脚本 `generate_index.py` 能够正确扫描 `articles/` 和 `images/` 目录，并生成相应的 `article_index.json` 和 `image_index.json` 文件。
    *   `main.js` 能够通过 `fetch` API 读取 JSON 索引，动态生成文章列表。
    *   点击文章列表中的链接，能够异步加载对应的 Markdown 文件内容，并通过 `marked.js` 渲染为 HTML 显示在文章内容区。URL hash 用于文章定位。
3.  **图片画廊功能**：
    *   实现了独立的图片画廊视图，能够从 `image_index.json` 加载图片信息并以网格形式展示图片缩略图。点击缩略图可在新标签页打开原图。
4.  **导航与视图切换**：
    *   左侧导航栏实现了“文章概览”和“图片画廊”两个主要视图的切换功能。
5.  **评论功能调整**：
    *   **关键变更**：鉴于动态加载 Giscus 并使其与每篇文章精确关联的技术复杂性和遇到的问题，现已将评论功能简化。**取消了原计划的每篇文章下内嵌独立 Giscus 评论区的方案。**
    *   **当前实现**：在 `index.html` 页面的固定位置（页脚上方）添加了一个静态链接，该链接直接指向一个在 GitHub Discussions 中预先创建的**项目总讨论帖/留言板**。用户将被引导至此统一页面进行评论和反馈，不再区分具体文章。
6.  **部署与路径处理**：
    *   网站已适配 GitHub Pages 部署，`main.js` 中包含对 `basePath` 的处理逻辑，以确保在仓库子目录下部署时资源路径正确。
7.  **待解决问题与挑战**：
    *   原Giscus动态加载方案已放弃。当前的静态链接方案是为确保评论功能可用性和稳定性的妥协。

### 三、之后任务

为最终完成项目并达到展示效果，后续主要任务包括：

1.  **内容填充与完善**：
    *   将所有项目相关的文章（约100篇）整理为 Markdown 格式，并放置于 `articles/` 目录下。
    *   收集并整理所有相关的图片资料（约100张），放置于 `images/` 目录下。
    *   每次内容更新后，务必运行 `generate_index.py` 脚本以更新 `data/` 目录下的 JSON 索引文件，并将所有更改（包括新内容文件和更新后的索引文件）推送到 GitHub 仓库。——这个需要每一次都提醒我。
2.  **GitHub Discussions 配置与维护**：
    *   确保已在项目 GitHub 仓库 (`yahoooooooooh/sanmu-art-project`) 的 Discussions 功能中创建了一个清晰、易于访问的总讨论帖。——接下来需要转到百度网盘，因为数据合规性
    *   将此讨论帖的**准确 URL** 更新到 `index.html` 文件中的“前往总讨论区”链接处。——同样到百度网盘，https://tieba.baidu.com/wxf/28199982?kw=%E6%89%91%E7%81%B0%E5%B9%B4%E7%94%BB%E5%88%9B%E6%96%B0&fr=sharewise
3.  **整体测试与优化**：
    *   对网站进行全面测试，包括：文章列表加载、文章内容渲染、图片画廊功能、图片查看、所有内部导航链接和外部讨论区链接的有效性。
    *   在不同浏览器和设备上进行兼容性测试。
    *   检查并修复任何可能的显示错误或功能异常。

4.  **文档化与交接**：
    *   (内部) 简要记录内容更新流程（编辑/添加文件 -> 运行脚本 -> Git 推送）供项目团队参考。
    *   确认 GitHub Pages 部署成功，网站可通过公开 URL 访问。
5.  **（可选）进一步优化**：
    *   根据实际内容量和展示效果，微调 CSS 样式以提升视觉体验。
    *   若有大量图片，可考虑图片压缩方案以优化加载速度（目前已有懒加载）。
