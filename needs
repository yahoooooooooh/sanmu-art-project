项目名称（暂定）： 扑灰年画创新传承项目成果展示网站 (增强版)

1. 项目背景与目标 (基本不变，略作强调)

背景： 本项目是为大学生创新创业训练计划（大创）设计的一个结构化、内容丰富的临时性成果展示网站，旨在通过在线平台向公众或评委清晰、高效地展示项目多元化的内容（包括大量文字资料和图片成果）。预计使用周期短，访问流量极低。
目标： 搭建一个成本极低（坚持 0 元）的静态网站，用于系统性地展示大量图片、文字内容，并提供简单的用户互动功能（评论或论坛）。确保在国内可访问，并针对内容管理和展示效率提供定制化技术指导，充分利用项目负责人的技术理解能力。
2. 功能需求 (细化内容组织与展示)

2.1 文章内容展示 (核心强化部分)：

2.1.1 独立文章承载： 支持将每篇项目相关文章（预计约 100 篇，如项目介绍、背景、各阶段成果、创新点论述、访谈记录、结项报告章节等）作为独立的 Markdown (.md) 文件进行存储和管理。
2.1.2 Markdown 格式支持： 内容以 Markdown 格式编写，支持其所有标准排版功能（标题、段落、列表、引用、代码块、内嵌图片等）。
2.1.3 动态文章列表/导航： 在主页或导航区域，通过 JavaScript 动态生成所有文章的标题列表，点击标题可加载并显示对应文章内容。
2.1.4 文章内容渲染： 使用客户端 JavaScript 库 (如 Marked.js) 将 Markdown 内容实时转换为 HTML 进行展示。
2.1.5 (可选) 文章元数据支持： 可在 Markdown 文件头部通过特定格式（如 YAML Front Matter）定义文章标题、日期、作者、摘要等元数据，供文章列表和页面展示使用。
2.2 图像资料展示 (核心强化部分)：

2.2.1 独立图片存储： 支持上传并独立存储项目相关的大量图片（预计约 100 张，如作品照片、活动记录、设计稿、AI 生成图等），支持基本格式（JPG, PNG）。
2.2.2 文章内嵌优化： 图片在 Markdown 文章中通过相对路径引用，确保链接正确，并考虑图片懒加载或适当压缩以优化加载速度。
2.2.3 (可选) 独立图片画廊/索引： 可在主页或单独页面创建一个图片画廊区域，通过 JavaScript 动态生成图片缩略图索引，点击可查看大图或跳转到相关文章。
2.3 用户评论功能 (基本不变，强调针对性)：

提供一个简单的用户互动模块，允许访问者在每篇文章页面（或动态加载的文章内容区域）下留言或反馈意见。
评论功能无需复杂权限管理，仅需基础的发表和查看功能，数据存储由第三方工具 (Giscus) 或平台托管。
Giscus 配置需确保评论与特定文章页面关联。
3. 非功能需求 (基本不变，略作调整)

成本约束： 总成本严格控制在 0 元，优先使用免费工具和服务，不购买自定义域名，使用平台提供的默认子域名。
易用性与技术门槛：
内容管理： Markdown 格式易于上手，文件组织结构清晰。
技术实现： HTML, CSS, JavaScript 的实现复杂度控制在项目负责人可理解和修改的范围内，提供关键代码片段和逻辑指导。避免复杂框架和构建工具。
访问性： 网站需在国内可正常访问，允许一定程度的加载延迟。提供 GitHub Pages 访问优化方案（如 Cloudflare CDN）或备选托管平台 (Vercel)。
临时性： 网站为短期使用，支持快速搭建和后期无维护成本的拆除（如删除仓库）。
可维护性 (新增针对多内容)： 目录结构和文件命名规范化，方便查找和更新特定文章或图片。索引生成脚本（如果使用）应简单易懂。
4. 技术方案 (核心强化部分)

4.1 网站托管与前端基础：

平台： GitHub Pages (免费静态网站托管)。
域名： GitHub Pages 默认子域名。
核心文件结构：
index.html: 主入口、导航、文章列表容器、图片库容器（如果需要）。
articles/: 存放所有 .md 文章文件。
images/: 存放所有图片文件。
js/main.js: 主要的 JavaScript 逻辑，负责动态加载内容、生成列表、Markdown 渲染等。
js/lib/marked.min.js (或类似库): 用于将 Markdown 转换为 HTML (从CDN引入或本地存放)。
css/style.css (可选): 自定义样式。
data/article_index.json (推荐方案): 由脚本生成的文章索引文件。
data/image_index.json (推荐方案, 可选): 由脚本生成的图片索引文件。
操作方式： 通过 GitHub 网页端或 Git 命令行进行文件上传和管理。
4.2 内容动态化实现 (关键)：

4.2.1 索引生成 (推荐方案 - “构建时”处理)：
工具： 项目负责人编写一个简单的 Python 脚本。
功能：
扫描 articles/ 目录，提取每篇 .md 文件的文件名，并可选地从文件内容（如第一行作为标题，或 YAML Front Matter）提取元数据（标题、摘要等）。
将收集到的文章信息保存为 data/article_index.json 文件。
(可选) 扫描 images/ 目录，将图片文件名和路径保存为 data/image_index.json。
流程： 本地更新文章/图片后，运行此 Python 脚本生成最新的 JSON 索引文件，然后将所有变更（文章、图片、JSON 文件）推送到 GitHub。
4.2.2 客户端渲染：
js/main.js 在页面加载时：
使用 fetch API 读取 data/article_index.json 和 data/image_index.json。
根据 JSON 数据动态生成文章列表链接和图片库（如果实现）的 HTML 元素，并插入到 index.html 的指定容器中。
当用户点击文章链接时：
使用 fetch API 读取 articles/ 目录下对应的 .md 文件内容。
使用 marked.min.js 将 Markdown 文本转换为 HTML。
将转换后的 HTML 内容显示在 index.html 的文章内容区域。
(重要) 更新浏览器 URL hash 或使用 History API (略复杂，但体验更好) 以便 Giscus 正确关联评论。
4.3 用户评论功能：

工具： Giscus (基于 GitHub Discussions，免费)。
实现方式：
在 GitHub 仓库启用 Discussions 功能。
访问 Giscus 官网，配置仓库信息。
关键配置： 将 Giscus 的 mapping 策略设置为 pathname 或 url，确保评论与每个独立加载的文章内容相关联。
将生成的 Giscus 嵌入代码粘贴到 index.html 中负责显示文章内容的区域下方。
4.4 访问优化 (同原方案)：

默认使用 GitHub Pages。
备选 Cloudflare CDN (免费方案) 或 Vercel 平台 (免费)。
5. 开发与部署流程 (强化内容管理步骤)

步骤 1 - 仓库创建与 GitHub Pages 配置 (同原方案)：

在 GitHub 创建新仓库。
在仓库 Settings 中启用 GitHub Pages，选择 main (或 master) 分支的 / (root) 目录作为来源。
步骤 2 - 核心结构与脚本搭建：

创建规划好的文件夹结构 (articles/, images/, js/, css/, data/)。
编写基础的 index.html (包含导航区、文章列表容器、文章内容显示区、评论区容器)。
编写 js/main.js 的核心逻辑框架 (读取 JSON, 生成列表, fetch Markdown, 调用 marked.js 渲染)。
(可选) 引入 marked.min.js 到 js/lib/ 或准备 CDN 链接。
(可选) 编写基础的 css/style.css。
步骤 3 - (推荐) 索引生成脚本开发：

项目负责人使用 Python 编写扫描 articles/ 和 images/ 目录并生成 article_index.json 和 image_index.json 的脚本。
步骤 4 - 内容准备与上传：

将所有文章以 .md 格式保存到 articles/ 文件夹。
将所有图片保存到 images/ 文件夹。
运行索引生成脚本，生成最新的 article_index.json 和 image_index.json 到 data/ 文件夹。
将所有文件 (HTML, JS, CSS, Markdown 文章, 图片, JSON 索引) 推送到 GitHub 仓库。
步骤 5 - 评论功能集成 (同原方案，注意 Giscus 配置)：

访问 Giscus 官网，配置仓库和 mapping 策略 (选择 pathname 或 url)。
获取 Giscus 嵌入代码，更新 index.html 文件，添加到文章内容显示区域的底部。
步骤 6 - 测试与优化 (同原方案)：

访问 GitHub Pages 默认子域名，测试文章列表加载、文章内容显示、Markdown 渲染、图片显示及 Giscus 评论功能是否针对不同文章独立。
如遇访问问题，尝试 CDN 或切换托管。
结果： 网站上线后，支持结构化展示大量文章和图片，并提供针对每篇文章的评论功能，总成本为 0 元。

6. 技术支持与辅导 (强调定制化)

全程指导： 提供从仓库创建、脚本编写辅助、JavaScript 逻辑实现、Giscus 高级配置到网站上线的每一步详细指导和代码片段示例。
定制化协助： 针对项目负责人的具体代码实现、JSON 结构设计、Markdown 渲染问题、Giscus 关联逻辑等提供深度技术支持和调试帮助。
效率优化： 共同探讨如何优化索引生成脚本的效率和 main.js 的性能（虽然流量低，但好的实践总没错）。
7. 约束与风险 (部分调整)

技术门槛：
内容编辑：Markdown 学习成本低。
技术实现：需要项目负责人理解并能修改基础的 HTML, CSS 和 JavaScript 代码，以及编写简单的 Python 脚本。（已确认负责人有此能力）
访问风险 (同原方案)。
评论功能限制 (同原方案)。
开发工作量： 相较于单 HTML 文件方案，此方案在前期搭建（JS逻辑、索引脚本）和内容组织上工作量稍大，但对于大量内容更可持续。
8. 总结 (强化版总结)

本需求旨在以最低成本（0 元）和适配项目负责人技术能力的最低技术门槛，基于 GitHub Pages、客户端 JavaScript、Markdown 和 Giscus，实现一个结构化、可维护的临时性大创项目展示网站。该网站能够高效承载并清晰展示大量（上百篇级别）的文章和图片资料，提供针对每项内容的独立评论功能，使用默认子域名，确保国内可访问，并提供定制化的全程技术辅导与深度协作。